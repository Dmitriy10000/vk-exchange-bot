from vkbottle.bot import Bot, Message
from commands import db, keyboards, vkc, cfg, qiwi
import time
import math


config = cfg.update()
token = config["token"]
bot = Bot(token)


# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
conn = db.connect_to_db()
cursor = conn.cursor()


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏ VKC location_id = 2
async def sell_vkc(message: Message):
    config = cfg.update()
    if config["market_config"]["sell_is_enabled"] == True:
        temp = "select qiwi from users where user_id = " + str(message.from_id)
        cursor.execute(temp)
        qiwi_number = cursor.fetchall()[0][0]
        if qiwi_number == None:
            await message.answer("‚ö†Ô∏è –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ VKC –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å QIWI –∫–æ—à–µ–ª–µ–∫. (–≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤–æ –≤–∫–ª–∞–¥–∫–µ \"üí∞–ü—Ä–æ—Ñ–∏–ª—å\")", keyboard=keyboards.main_menu)
            return
        
        # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
        amount = message.text
        amount = amount.replace(" ", "")
        amount = amount.replace(".", "")
        amount = amount.replace(",", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞
        if amount.isdigit():
            vkc_amount = int(amount)
            min_amount = config["market_config"]["coin_amount"] / (config["market_config"]["sell_price"] / 100)
            
            # –û–∫—Ä—É–≥–ª—è–µ–º —á–∏—Å–ª–æ –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
            min_amount = math.ceil(min_amount)

            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ 1 —Ä—É–±–ª—å
            if vkc_amount < min_amount:
                min_amount = "{:,}".format(min_amount).replace(",", ".")
                await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏: " + str(min_amount) + " VKCoin")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ VKCoin –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_max_vkc = vkc.get_balance(message.from_id)
            if vkc_amount > user_max_vkc:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ VKCoin")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ RUB –≤ —Ä–µ–∑–µ—Ä–≤–µ –º–∞–≥–∞–∑–∏–Ω–∞
            shop_max_rub = vkc.get_shop_balance()
            if vkc_amount / config["market_config"]["coin_amount"] * (config["market_config"]["sell_price"] / 100) > shop_max_rub:
                await message.answer("–£ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ RUB")
                return

        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞")
            return
        
        rub_amount = vkc_amount / config["market_config"]["coin_amount"] * config["market_config"]["sell_price"]

        # –û–∫—Ä—É–≥–ª—è–µ–º —á–∏—Å–ª–æ –≤ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        rub_amount = math.floor(rub_amount)

        temp = "insert into transactions (user_id, vkc_amount, rub_amount, type, status) values (" + str(message.from_id) + ", " + str(vkc_amount) + ", " + str(rub_amount) + ", \'sell\', \'pending\');"
        temp += "update users set location_id = 4 where user_id = " + str(message.from_id) + ";"
        cursor.execute(temp)
        conn.commit()

        temp = "select id from transactions where user_id = " + str(message.from_id) + " and status = \'pending\';"
        cursor.execute(temp)
        transaction_id = cursor.fetchone()[0]

        url = "vk.com/coin#x" + str(config["merchant_config"]["merchant_id"]) + "_" + str(vkc_amount * 1000) + "_" + str(transaction_id)
        vkc_amount = "{:,}".format(vkc_amount).replace(",", ".")
        text = "–ü—Ä–æ–¥–∞–∂–∞ VKCoin\n"
        text += "–°—É–º–º–∞: " + str(vkc_amount) + " VKCoin\n"
        text += "–í—ã –ø–æ–ª—É—á–∏—Ç–µ: " + str(rub_amount/100) + " —Ä—É–±–ª–µ–π\n"
        text += "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: " + str(url) + "\n\n"
        text += "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ VKCoin'–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–Ø –ø–µ—Ä–µ–≤—ë–ª\"\n"
        text += "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É\""
        await message.answer(text, keyboard=keyboards.KEYBOARD_CANCEL_SELL)

    else:
        temp = "select is_admin from users where user_id = " + str(message.from_id)
        cursor.execute(temp)
        is_admin = cursor.fetchall()[0][0]
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–¥–∞–∂–∞ VKCoin –æ—Ç–∫–ª—é—á–µ–Ω–∞"
        if is_admin == True:
            await message.answer(text, keyboard=keyboards.KEYBOARD_ADMIN)
            temp = "update users set location_id = 10 where user_id = " + str(message.from_id)
        else:
            await message.answer(text, keyboard=keyboards.KEYBOARD_MAIN)
            temp = "update users set location_id = 0 where user_id = " + str(message.from_id)
        cursor.execute(temp)
        conn.commit()


# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏ VKC location_id = 4
async def confirm_sell_handler(message: Message):
    temp = "select location_id from users where user_id = " + str(message.from_id)
    cursor.execute(temp)
    location_id = cursor.fetchall()[0][0]
    if location_id == 4:
        temp = "select vkc_amount, rub_amount, date, time from transactions where user_id = " + str(message.from_id) + " order by id desc limit 1;"
        cursor.execute(temp)
        last_transaction = cursor.fetchall()[0]     # (datetime.date(2022, 10, 21), datetime.time(18, 45, 41, 714145))
        vkc_amount = int(last_transaction[0])
        rub_amount = int(last_transaction[1])
        # unix
        unix = int(time.mktime(last_transaction[2].timetuple())) + last_transaction[3].hour * 3600 + last_transaction[3].minute * 60 + last_transaction[3].second
        status = vkc.check_payments(message.from_id, vkc_amount*1000, unix)
        if status == True:
            temp = "update transactions set status = \'success\' where user_id = " + str(message.from_id) + " and status = \'pending\';"
            temp += "update users set location_id = 0 where user_id = " + str(message.from_id) + ";"
            cursor.execute(temp)
            conn.commit()
            await message.answer("–ü–µ—Ä–µ–≤–æ–¥ VKCoin'–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–∞—à–∞ —Å—É–º–º–∞ –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç", keyboard=keyboards.KEYBOARD_MAIN)
            temp = "select QIWI from users where user_id = " + str(message.from_id)
            cursor.execute(temp)
            QIWI = cursor.fetchall()[0][0]
            rub_amount = rub_amount/100
            qiwi.transfer_to_qiwi(rub_amount, QIWI)
        else:
            await message.answer("–í—ã –µ—â—ë –Ω–µ –ø–µ—Ä–µ–≤–µ–ª–∏ VKCoin'—ã")


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏ VKC location_id = 4
async def cancel_sell_handler(message: Message):
    temp = "select location_id from users where user_id = " + str(message.from_id)
    cursor.execute(temp)
    location_id = cursor.fetchall()[0][0]
    if location_id == 4:
        temp = "select vkc_amount, rub_amount, date, time from transactions where user_id = " + str(message.from_id) + " order by id desc limit 1;"
        cursor.execute(temp)
        last_transaction = cursor.fetchall()[0]     # (datetime.date(2022, 10, 21), datetime.time(18, 45, 41, 714145))
        vkc_amount = int(last_transaction[0])
        rub_amount = int(last_transaction[1])
        # unix
        unix = int(time.mktime(last_transaction[2].timetuple())) + last_transaction[3].hour * 3600 + last_transaction[3].minute * 60 + last_transaction[3].second
        status = vkc.check_payments(message.from_id, vkc_amount*1000, unix)
        if status == True:
            temp = "update transactions set status = \'success\' where user_id = " + str(message.from_id) + " and status = \'pending\';"
            temp += "update users set location_id = 0 where user_id = " + str(message.from_id) + ";"
            cursor.execute(temp)
            conn.commit()
            await message.answer("–ü–µ—Ä–µ–≤–æ–¥ VKCoin'–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–∞—à–∞ —Å—É–º–º–∞ –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç", keyboard=keyboards.KEYBOARD_MAIN)
            temp = "select QIWI from users where user_id = " + str(message.from_id)
            cursor.execute(temp)
            QIWI = cursor.fetchall()[0][0]
            rub_amount = rub_amount/100
            qiwi.transfer_to_qiwi(rub_amount, QIWI)
        else:
            temp = "update transactions set status = \'canceled\' where user_id = " + str(message.from_id) + " and status = \'pending\';"
            temp += "update users set location_id = 0 where user_id = " + str(message.from_id) + ";"
            cursor.execute(temp)
            conn.commit()
            await message.answer("–ü—Ä–æ–¥–∞–∂–∞ VKCoin'–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞", keyboard=keyboards.KEYBOARD_MAIN)